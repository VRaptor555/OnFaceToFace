using System;
using System.Collections.Generic;
using UnityEngine;

// Base... в названии используется специально для указания того, что этот класс является 
//   базовым, общим для всех остальных предметов.
// Здесь мы описываем общие свойства всех категорий предметов. 
// Если, например, потребуется добавить информацию о стоимости предмета 
//   или об уровне качества, то это самое лучшее место
public abstract class BaseItemData : ScriptableObject {
    // Иконка
    public Sprite Icon;
    // Имя предмета
    public string Title;
    // Описание
    public string Description;
    
    // Добавим метод добавления предмета в базовый класс описания
    // Func<int, ItemState> - это описание параметра, который требует, 
    //    чтобы передавалась функция принимающая параметр типа int, 
    //    и возвращала ItemState.
    //  В качестве параметра этого метода мы передаем только информацию 
    //     о кол-ве добавляемых предметов, 
    //     информация о том, какой фактически предмет добавляется уже содержится внутри.
    //  Это сделано для того, чтобы предостеречь разработчика от случайно ошибки, 
    //     когда он случайно передаст информацию о другом предмете,
    //     в таком случае будет выполнена неверная логика для размещения предмета в инвентаре.
    //  Если же разработчик захочет добавить предмет другого типа в инвентарь, 
    //     то необходимо будет воспользоваться основным методом инвентаря - AddItem,
    //     которая обеспечит правильную логику добавления предмета в инвентарь.
    // Здесь virtual означает, что данный метод может быть изменен в дочерних классах, 
    //    и дальше мы увидим как это происходит.
    public virtual void PutToInventory(InventoryController inventory, int count, Func<int, ItemState> putNewItem) {
        // Большинство предметов имеет стандартную логику поведения при добавлении в инвентарь,
        //    поэтому просто добавляем объект в инвентарь.
        // Добавляем предметы, раздельно
        for (int i = 0; i < count; i++) {
            // Добавляем каждый предмет в отдельные ячейки
            var state = putNewItem(1);
        
            // Если мы не смогли добавить предмет в инвентарь, 
            //    то завершаем логику добавления предмета в инвентарь
            if (state == null) {
                return;
            }
        }
    }

    public virtual void DelFromInventory(InventoryController inventory, int count, Func<int, ItemState> delItem)
    {
        for (int i = 0; i < count; i++)
        {
            delItem(1);
        }
    }
}